

리덕스 왜 쓰는가?
리덕스 왜 쓰는가?
리덕스 왜 쓰는가?
리덕스 왜 쓰는가?

1. 상태관리를 할 때!
2. App에 있는 한 컴포넌트를 두 개로 분리하고 싶다면 ?
3. state와 props를 이용해서 만들면, 추후에 App 컴포넌트를 수정하고 싶어도 어렵다.
    자식 컴포넌트는 부모 컴포넌트의 state를 맘대로 조작할 수 없기 때문!
4. 그렇다면 만약 App 컴포넌트와 새로 분리할 컴포넌트가 같은 데이터저장소에 있다면?
5. 새 컴포넌트를 추가하면, App이 보고있는 데이터도 같이 추가가 될것!!

>> 이 개념이 바로 리덕스!! 리덕스는 데이터를 한 군데 몰아넣고, 여기저기 꺼내볼 수 있게 해준다

⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

상태관리툴
ㅠㅠ


⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

🦆 Store
전역으로 가지고 있는 데이터
dictionary 형태로 보관한다 { [key] : value; }

🦆 Action
상태를 변화시킬때 발생함
객체 형태로 씀 {type: 'CHANGE_STATE', data:{...}}

🦆 ActionCreator
액션생성 함수 / 액션을 만들기 위해 사용함
함수 형태로 씀 export const createBucket = (textBucket) => { return {type: CREATE, textBucket}; }

🦆 Reducer
리덕스에 저장된 데이터를 변경하는 함수
상태, 리덕스의 데이터값을 가져옴 / 액션을 호출하기 위한 내장함수를 포함함
dictionary 형태로 씀

🦆 dispatch
액션을 발생시키는 역할을 함
store의 내장함수로 자주 쓰임!

⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

기억해야 할 특징 3가지
1) Store는 1개만 쓴다
    단일스토어 규칙 : 한 프로젝트에는 한 스토어만 존재하도록
2) Store의 State는 오직 Action으로만 변경할 수 있다.
    불변성
3) 어떤 요청이 와도 Reducer는 같은 동작을 해야한다.
    즉 Reducer는 순수한 함수여야한다.

⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

리덕스 설정하기
(데이터 받아오기 - 모듈, 액션, 액션함수, 리듀서, 스토어 사용하는 방법)

1. 리덕스 패키지 설치하기
2. redux 폴더 만들고 안에 modules 폴더 만들기 (안에 파일은 소문자)
3. 폴더 modules 안에 만든 파일(예를들면 counter.js , buket.js)에 
   모듈을 만든다. (action, action함수, reducer)

* 모듈(module) : state 들의 묶음
* 스토어(store) : 스토어 안에는 state 값과 reducer 그리고 내장함수가 포함되어 있다.




1. 리덕스 패키지 설치
    명령어 입력 : yarn add redux react-redux
    redux는 react와 별개의 라이브러리 이므로,
    redux패키지 하나와 react와 redux를 연결해주는 react-redux 총 두개를 설치해주어야 한다.
2. 폴더, 파일 만들기
    src 폴더 안에 redux폴더를 만들고, 그안에 modules폴더를 만들어준다.
    module파일의 이름은 소문자로 만든다.! (bucket.js)
3. 총 3가지, action, action함수, reducer를 만든다.
    3-1. Actions 생성
        action의 이름은 대문자로 줌 (LODA)
        state값은 객체형식으로 적기
    3-2. initialState 생성
4. Action Creators 생성
    함수를 만든다.
    return값에 action의 type명과 가져오는값(여기서는 input된 textBucket값)을 써줌
5. Reducer 생성
    export default function reducer(state={}, action={}){ switch(action.type){ 
        case '~action~' : { return ~ ;} default: return state;}}
    export default 로 reducer 함수를 빼주기!
    state와 action값 지정
    switch문으로 action 받아오고, return해서 빼내준다.
6. Store 만들기
configStore.js
    필요한것 import 해오기
        import { createStore, combineReducers로 } from 'redux';
        import buket from './modules/buket';
        import { createBrowserHistory } from 'history';

    combineReducers로 reducer 합쳐주기, store에 집어넣기
        //리듀서 합쳐주기
        const rootReducer = combineReducers({bucket});
        //스토어 만들어서 주입하기
        const store = cresteStore(rootReducer);
        //스토어 export store 해주기
        export default store;

⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

리덕스 예제
리덕스 예제
리덕스 예제


💡 설정코드

// src/configStore.js
src/configStore.js 에 아래 코드를 입력하세요.

import { createStore } from "redux";
import { combineReducers } from "redux";

const rootReducer = combineReducers({});
const store = createStore(rootReducer);

export default store;



// index.js 
디렉토리의 가장 최상단에 있는 index.js에 아래 내용을 입력하세요.

; // 원래부터 있던 코드
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import reportWebVitals from "./reportWebVitals";

; // 우리가 추가할 코드
import store from "./redux/config/configStore";
import { Provider } from "react-redux";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(

; App을 Provider로 감싸주고, configStore에서 export default 한 store를 넣어줍니다.
    <Provider store={store}>
        <App />
    </Provider>
);



💡 모듈 만들기
모듈이란, State의 그룹.
우리의 첫 모듈은 카운터 프로그램에 필요한 State들이 모여있는 모듈이 될 것 입니다.

1. `modules` 폴더에 `counter.js` 파일을 생성한다.
2. 코드를 작성한다.
// src/modules/counter.js

// 초기 상태값
const initialState = {
  number: 0,
};

// 리듀서
const counter = (state = initialState, action) => {
  switch (action.type) {
    default:
      return state;
  }
};

// 모듈파일에서는 리듀서를 export default 한다.
export default counter;

=======================================================

살펴보자

1) initialState === 초기 상태값 
어떤 State의 초기값을 정해주는 것.
useState를 사용했을 때 괄호 안에 초기값을 지정해주던 것과 같은 이치입니다. 
" 
const [number, setNumber] = useState(0) 
"


"
// 초기 상태값
const initialState = {
  number: 0,
};
"

여기서 State의 초기값은  { } (객체) 이고, 그 안에 number 라는 변수에 초기값 0을 할당해준 것.
초기값은 객체, 배열, 원시데이터도 가능하고 객체 안에 여러 변수를 넣을 수도 있다.

// 초기값이 0
const initialState = 0;

// 초기값이 0이 있는 배열 
const initialState = [0];

// 초기값이 number = 0, name = '석구'인 객체
const initialState = {
	number: 0,
	name: '석구'
};



2) Reducer === 변화를 일으키는 함수

"
// 리듀서 
const counter = (state = initialState, action) => {
  switch (action.type) {
    default:
      return state;
  }
};
"

우리가 useState()를 사용할 때, number라는 값을 바꾸고 싶으면 setNumber를 사용했습니다.
" 
const onClickHandler = () => {
    setNumber(number + 1); // setState를 이용해서 state 변경
} 
"


**리덕스에서는 리듀서가 이 역할을 합니다.** 

우리가 "리듀서야 number에 +1를 해줘" 라고 명령하면, 리듀서는  number에 +1을 더해줍니다.


리듀서의 인자에 보면 `(state = intialState, action)` 이라고 되어 있습니다.

우리는 리듀서 인자 첫번째 자리에서는  `state`를, 
두번째 자리에서는 `action` 이라는 것을 꺼내서 사용할 수 있습니다.  
이것이 무엇인지는 지금 당장 몰라도 됩니다. 
다만, `state = intialState` 처럼 `state`에  `initialState`를 할당해줘야 하는 것만 기억해주세요.



3) 카운터 모듈을 스토어에 연결하기
지금까지 모듈파일에서 초기 상태값과 리듀서를 작성했습니다. 
이제 우리가 만든 모듈을 스토어에 연결 시켜야 합니다. 
아직까진 모듈과 스토어가 각각 따로 분리되어 있는 상태이기 때문에 
우리가 만든 State를 스토어에서 꺼낼 수 없습니다.


configStore.js로 이동해서 아래 코드를 추가해주세요.
// src/redux/modules/config/configStore.js


// 원래 있던 코드
import { createStore } from "redux";
import { combineReducers } from "redux";

// 새롭게 추가한 부분
import counter from "../modules/counter";

const rootReducer = combineReducers({
  counter: counter, // <-- 새롭게 추가한 부분
});
const store = createStore(rootReducer);

export default store;

이러면 스토어와 모듈이 연결됩니다.



💡 스토어와 모듈 연결 확인하기
1) useSelector = 스토어 조회

우리가 생성한 모듈을 스토어에 잘 연결했는지 확인하는 방법은 컴포넌트에서 스토어를 직접 조회하면 됩니다. 
컴포넌트에서 리덕스 스토어를 조회하고자 할때는 useSelector라는 ‘react-redux’의 훅을 사용해야 합니다. 

useSelector의 사용법
// 1. store에서 꺼낸 값을 할당 할 변수를 선언합니다.
const number = 

// 2. useSelector()를 변수에 할당해줍니다.
const number = useSelector() 

// 3. useSelector의 인자에 화살표 함수를 넣어줍니다.
const number = useSelector( ()=>{} )

// 4. 화살표 함수의 인자에서 값을 꺼내 return 합니다. 
// 우리가 useSelector를 처음 사용해보는 것이니, state가 어떤 것인지 콘솔로 확인해볼까요?
const number = useSelector((state) => {
	console.log(state)
	return state
});

// App.js
import React from 'react';
//useSelector, useDispatch 리덕스 내장함수(Hook)이므로 쓰려면 불러와야한다.
import { useSelector } from 'react-redux';


function App() {
  const counterStore = useSelector((state) => state);
  console.log(counterStore);

  return (
    <div></div>
  );
}

export default App;


 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥 🔥
 우리는 컴포넌트에서 스토어를 조회할 때
`react-redux`에서 제공하는 `useSelector` 라는 훅을 사용합니다.

브라우저를 켜고, 콘솔을 보면 아래 이미지처럼 객체가 보이고, 
그 안에 counter 라는 값이 있는 것을 볼 수 있습니다. 
우리가 만든 counter 라는 모듈의 state가 보이는 것을 알 수 있습니다. 
이렇게 화살표 함수에서 꺼낸 state라는 인자는 현재 프로젝트에 존재하는 모든 리덕스 모듈의 state 인 것 입니다.



이제 우리는 어떤 컴포넌트에서도 접근 할 수 있는 스토어를 가지게 되었습니다. 
만약 우리가 컴포넌트에서 number라는 값을 사용하고자 한다면 아래 코드처럼 꺼내서 사용하면 됩니다. 
const number = useSelector(state => state.counter.number); // 0


⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

1. counter.js 모듈의 state 수정 기능 만들기 (+ 1 기능 구현해보기)


1) **어떻게 counter.js 모듈에 있는 state의 값을 변경할 수 있을까?**

우리가 useState()를 사용해서 number에 +1을 할 때는 setNumber을 이용해서 +1을 해주었습니다. 
🛠 useState를 쓸 경우

// local state
const [number, setNumber] = useState(0)

// click handler
const onClickHandler = () => {
	setNumber(number + 1)
}

>>> 리덕스에서 값의 수정은 리듀서에서 일어난다


만약에 counter.js 모듈에 있는 number에 +1을 하고 싶으면 어떻게 해야할까?

⭕️ 1/ 리듀서에서 보낼 number에 더하기 1하라는 명령을 만든다.
⭕️ 2/ 명령을 리듀서에게 보낸다.
⭕️ 3/ 리듀서가 명령을 받아 더하기 1을 한다.

so,################################################
⭕️ 1/ 리듀서에서 보낼 number에 더하기 1하라는 명령을 만들기
명령은 action이라 한다. action을 코드로 나타내면 객체가 되므로
이를 "액션 객체" 라고 한다.

액션 객체는 반드시 type이라는 key 값을 가져야 한다.
왜냐면 우리가 액션 객체를 리듀서 에게 보냈을 때 리듀서는 객체 안의 type이라는 key를 확인하기 때문에

//number에 +1 을 하는 액션 객체
{ type : "PLUS_ONE" };



⭕️ 2/ 명령=액션 객체를 리듀서에게 보낸다.
액션객체를 보내기 리듀서로 보내기위해서는 새로운 훅을 사용해야 합니다. 

useDispatch

우리가 만든 액션 객체를 리듀서로 보내주는 역할을 하는 훅입니다. 

🔥 useDispatch라는 훅을 사용하기 위해서는 컴포넌트 안에서 아래와 같이 
코드를 작성해서 dispatch라는 변수를 생성해줘야 합니다.
이 dispatch는 함수다! 사용할 때는 ()를 붙여 함수를 실행하면 된다.



// src/App.js

import React from "react";
import { useDispatch } from "react-redux"; // 리덕스 훅이므로 import 해야 쓸 수 있다.

const App = () => {
  const dispatch = useDispatch(); // dispatch 생성
  return (
    <div>
      <button> 더하기 </button> 
    </div>
  );
};

export default App;

그리고 dispatch를 사용할 때 ( ) 안에 액션객체를 넣어주면 됩니다. 
만약 어떤 버튼을 클릭했을 때 리듀서로 액션객체를 보내고 싶다면 아래와 같이 코드를 작성합니다.


// src/App.js

import React from "react";
import { useDispatch } from "react-redux"; 

const App = () => {
    const dispatch = useDispatch(); 
    return (
        <div>
        <button
            ; // 이벤트 핸들러 추가
            onClick={() => {
            ; // 버튼을 클릭하면 dispatch가 실행되고, ()안의 액션객체가 리듀서로 전달된다.
            ; // 액션객체는 반드시 type이라는 key를 가져야 한다. 
            ; // 리듀서가 액션객체 안에 있는 type의 key값을 확인하기 때문이다. 
            ; // 액션객체 = {type: "PLUS_ONE"}
            dispatch({ type: "PLUS_ONE" }); 
            }}
        >
                    + 1
        </button>
        </div>
    );
    };

export default App;



⭕️ 3/ 리듀서가 명령을 받아 더하기 1을 한다.
3-1 액션 객체 받기
dispatch를 이용해 리듀서로 액션을 보내긴 보냈지만, 
무언가 눈으로 보이는게 없으니 이게 지금 잘 된건가? 궁금하지 않으신가요? 
우리가 액션객체를 리듀서로 보냈으니, 리듀서에서 액션객체가 잘 왔는지 확인해보겠습니다.

현재 counter.js 모듈의 코드 이 상태 일 것 입니다.
우리가 App.js에서 보낸 액션객체를 받을 수 있도록 구현해볼 것 입니다.

// src/redux/modules/counter.js

// 초기 상태값
    const initialState = {
    number: 0,
    };

    // 리듀서
    const counter = (state = initialState, action) => {
        console.log(action); // 여기에 console.log(action) 추가
    switch (action.type) {
        default:
        return state;
    }
    };

// 모듈파일에서는 리듀서를 export default 한다.
export default counter;



3-2 더하기 1 구현하기
이제 액션객체를 잘 보내고, 잘 받고 있음을 확인했느니 
state에 있는 number를 실제로 변경하는 로직 코드를 구현해볼게요. 
로직코드는 리듀서 안에 있는 스위치문으로 작성됩니다. 


리듀서가 액션객체를 받아 상태를 바꾸는 원리는 아래와 같습니다.

1. 컴포넌트로부터 dispatch를 통해 액션객체를 전달 받는다.
2. action 안에 있는 type을 스위치문을 통해 하나씩 검사해서, 일치하는 case를 찾는다.
3. type과 case가 일치하는 경우에, 해당 코드가 실행되고 새로운 state를 반환(return) 한다.
4. 리듀서가 새로운 state를 반환하면, 그게 새로운 모듈의 state가 된다.



// src/modules/counter.js

// 초기 상태값
const initialState = {
    number: 0,
};

// 리듀서
const counter = (state = initialState, action) => {
    console.log(action);
    switch (action.type) {
        ; // PLUS_ONE이라는 case를 추가한다.
        ; // 여기서 말하는 case란, action.type을 의미한다.
        ; // dispatch로부터 전달받은 action의 type이 "PLUS_ONE" 일 때
        ; // 아래 return 절이 실행된다. 
        case "PLUS_ONE":
        return {
        ; // 기존 state에 있던 number에 +1을 더한다.
            number: state.number + 1,
        };

        default:
        return state;
    }
    };

// 모듈파일에서는 리듀서를 export default 한다.
export default counter;


action이 {type: “PLUS_ONE”}  이기 때문에, 
리듀서 안에 있는 스위치문은 action.type을 조회합니다. 
그리고 그것이 일치하면 return  절이 실행되고 새로운 state를 반환합니다. 
막상 글로 보면 복잡해보였지만, 코드로 보면 스위치문에 case를 하나 추가해주는 것으로 완료됩니다.

이제 우리가 dispatch를 통해 액션객체를 App.js 컴포넌트에서 보냈고, 
그것을 리듀서에서 받아 스위치문을 통해 조건을 찾았고, 
그에 해당했을 때 state값을 변경하는 로직까지 모두 구현했으니
정말 state가  잘 변경되는지 확인해봅시다.


3-3 useSelector로 변경된 state값 확인하기

useSelector를 이용해서 App.js에서 state값을 조회해봅시다. 
App.js로 이동해서 useSelector를 작성하고, number를 콘솔에 찍어봅시다.


// src/App.js

import React from "react";
import { useDispatch, useSelector } from "react-redux";

const App = () => {
    const dispatch = useDispatch();

        // 👇 코드 추가
    const number = useSelector((state) => state.counter.number); 

    console.log(number); // 콘솔 추가
    return (
        <div>
        ; {/* 👇 코드 추가 */}
        {number}
        <button
            onClick={() => {
            dispatch({ type: "PLUS_ONE" });
            }}
        >
            + 1
        </button>
        </div>
    );
    };

export default App;



⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️


1. Action Creator

-Action Creator 란?
만약에 우리가 액션객체의 value를 변경할 일이 생긴다면 어떨까?

PLUS_ONE , MINUS_ONE 이라는 value 대신 
이 액션객체가 counter 모듈안에 있다는 것을 강조하기 위해서 
counter/PLUS_ONE, counter/MINUS_ONE 라는 value로 
바꾸길 원한다면 아래 코드에서 4군데를 변경해줘야 할 것 입니다. 
근데 또 만약에 그게 4군데가 아니라 프로젝트 규모가 굉장히 커서 100군데라면? 


// src/App.js
import React from "react";
import { useDispatch, useSelector } from "react-redux";

const App = () => {
    const dispatch = useDispatch();
    const number = useSelector((state) => state.counter.number);

    return (
        <div>
        {number}
        <button
            onClick={() => {
            dispatch({ type: "PLUS_ONE" }); // counter/PLUS_ONE로 변경
            }}
        >
            + 1
        </button>
        <button
            onClick={() => {
                        // 액션객체 디스패치
            dispatch({ type: "MINUS_ONE" }); // counter/MINUS_ONE로 변경
            }}
        >
            - 1
        </button>
        </div>
    );
    };

export default App;


// src/modules/counter.js
; // 초기 상태값
const initialState = {
    number: 0,
};

; // 리듀서
const counter = (state = initialState, action) => {
    switch (action.type) {
        case "PLUS_ONE": // counter/PLUS_ONE로 변경
        return {
            number: state.number + 1,
        };

            // action.type이 MINUS_ONE 일 때 새로운 state 반환
        case "MINUS_ONE": // counter/MINUS_ONE로 변경
        return {
            number: state.number - 1,
        };
        default:
        return state;
    }
    };

; // 모듈파일에서는 리듀서를 export default 한다.
export default counter;



- Action Creator 만들기

앞으로는 액션객체를 한 곳에서 관리할 수 있도록 "함수"와 "액션 value"를 상수로 만들어보겠습니다.


만약 PLUS_ONE 이라는 액션 객체를 만드는 함수를 만든다면 아래와 같이 만들 수 있습니다. 
그리고 우리는 이것을 Action Creator라고 부릅니다. 말 그대로 액션을 만드는 생성자 인 것이죠. 


// src/redux/modules/counter.js

const PLUS_ONE = "PLUS_ONE"; // value는 상수로 생성

; // 액션객체를 반환하는 함수 생성
; // export 가 붙는 이유는 plusOne()는 밖으로 나가서 사용될 예정이기 때문입니다.
export const plusOne = () => { 
  return {
    ;// type에는 위에서 만든 상수로 사용 (vscode에서 자동완성 지원)
    type: PLUS_ONE, 
  };
};



























































































































⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

⭐️ useSelector : 데이터 가져오기 (state 조회 후 가져오기)
⭐️ useDispatch : 데이터 수정하기 (action 을 받아서 리듀서에게 전달)

리덕스와 컴포넌트 연결하기

index.js
7. Provider불러오고, store 임포트하기
import {Provider} from 'react-redux';
import store from './redux/configStore';

ReactDOM.render(
    <Provider store={store}>
        <BrowserRouter>
            <App />
        </BrowserRouter>
    </Provider>,
    document.getElenentById('root')
);

⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

컴포넌트에서 리덕스 데이터 사용하기

클래스형 컴포넌트
App.js
1. redux모듈과 connect함수
import {connect} from 'react-redux';
2. action함수 불러오기
import {loasBucket, creatBucket} from './redux/modules/bucket';

+ connect로 컴포넌트와 스토어를 연결함 - withRouter 가져오므로 바꿔 줌
export default connect (mapStateToProps, mapDispatchToProps)(withRouter(App));
    connect 함수 : component와 store를 연결해준다.
    action 함수 : 불러와서, action생성함수를 부르는 함수에서 사용해준다.

3. 상태값 가져오는 함수 : 리덕스 스토어에 있는 state 상태값을 props 형태로 넣어줌
    const mapStateToProps = (state) => {
        return {
            # 스토어에 있는 상태값
            bucket_list: state.bucket.list
        };
    }

4. action생성 함수를 부르는 함수 만들기 : action이 생기는 것을 감시하는 dispatch를 넘겨줌
    const mapDispatchToProps = (dispatch) => {
        # action을 반환하기
        return{
            load: () => {
                dispatch( loadBucket() );
            },
            create: (bucket_text) => {
                dispatch( createBucket(bucket_text) );
            }
        }
    }

    상태값을 가져오는 함수 : 리덕스 스토어에 있는 state상태값을 props의 형태로 넣어줌
    action생성 함수를 부르는 함수 : action을 반환해주고, dispatch로 감시해줌

5. console 에 this.props 찍어보기
    componentDidMount(){
        console.log(this.props);
    }

6. this.state에 있는 데이터를 지우고, 스토어에 있는 데이터로 바꾸기
class App extends React.Component {
    constructor (props){
        super(props);
        this.state={

        };
    };
}
    App 컴포넌트 안에 this.state로 있던 list를 지우고,
    
    const map = (state) => {
        return{
            //스토어에 있는 상태값
            bucket_list: state.bucket.list
        };
    }
    상태값을 가져오는 mapStateToProps 함수 안에 state를 props 형태로 넣어준다.

7. setState를 this.props.create로 바꾸기
addBucketList = () => {
    const new_item = this.text.current.value;
    this.props.create(new_item);
}
    리스트를 생성하는 값을 props 형태로 바꿔서 만들어 준다.



⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️-⭐️

컴포넌트에서 리덕스 데이터 사용하기

함수형 컴포넌트

리덕스도 리액트처럼 훅이 있다.
액션 생성 함수를 불러오고
스토어에 저장된 값도 가져올 수 있음

1. BucketList 컴포넌트에서 useSelector() 적용하기
    Redux hook을 불러온다.
import {useDispatch, useSelector} form 'react-redux';

const BucketList = (props) => {
    버킷리스트를 리덕스 훅으로 가져오기
    const bucket = useSelector(state =>state.bucket.list);

    console.log(bucket_list);
}

2. 몇 번째에 와있는지 알기 위해 url 파라미터 적용해보기
<ListStyle>
    {bucket_list.map((list,index) => {
        return (
            <ItemStyle
                className = "list_item"
                key = {index}
                onClick = {() => {
                    props.history.push("./detail"+index);
                }}
            >
                {list}
            </ItemStyle>
        )
    })}
</ListStyle>


<Route
    path="./detail/:index"
    component={Detail}
/>

3. Detail에서 BucketList 내용 띄우기
const Detil = (props) => {
    const dispatch = useDispatch();
    # 스토어에서 상태값 가져오기
    const bucket_list = useSelector((state) => state.bucket.list);
    # url 파라미터에서 인덱스 가져오기
    let bucket_index = parseInt(props.match.params.index);

    console.log(props);

    return(
        <div>
            <h1>{bucket_list[bucket_index]}</h1>
            <button onClick = {() => {
                dispatch(deleteBucket(buket_index));
                props.history.goBack();
            }}>삭제하기</button>
    )
}







리듀서가 액션객체를 받아 상태를 바꾸는 원리는 아래와 같습니다.

1. 컴포넌트로부터 dispatch를 통해 액션객체를 전달 받는다.
2. action 안에 있는 type을 스위치문을 통해 하나씩 검사해서, 일치하는 case를 찾는다.
3. type과 case가 일치하는 경우에, 해당 코드가 실행되고 새로운 state를 반환(return) 한다.
4. 리듀서가 새로운 state를 반환하면, 그게 새로운 모듈의 state가 된다.
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































