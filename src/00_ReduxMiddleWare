
미들웨어는 리덕스가 지니고 있는 핵심 기능.

  --------      ----------       --------      --------
 |  액 션  | => | 미 들 웨 어 | => | 리 듀 서 | => | 스 토 어 |
  --------      ----------       --------      --------

  리덕스 미들웨어를 사용하면서 액션이 디스패치된 다음,
  리듀서에서 해당 액션을 받아와서 업데이트 하기 전에 추가적인 작업을 할 수 있습니다.

  여기서 추가적인 작업은 다음같은 것들이 있습니다.

  🔸 특정 조건에 따라 액션이 무시되게 만들 수 있습니다.
  🔸 액션을 콘솔에 출력하거나, 서버쪽에 로깅을 할 수 있습니다.
  🔸 액션이 디스패치 됐을 때 이를 수정해서 리듀서에게 전달되도록 할 수 있습니다.
  🔸 특정 액션이 발생했을 때 이에 기반하여 다른 액션이 발생되도록 할 수 있습니다.
  🔸 특정 액션이 발생했을 때 특정 자바스크립트 함수를 실행시킬 수 있습니다.

  만약 counter 프로그램에서 더하기 버튼을 클릭했을 때 바로 +1를 더하지 않고 
  3초를 기다렸다가, +1이 되도록 구현하려면 미들웨어를 사용하지 않고서는 구현할 수 없습니다.
  왜냐하면 dispatch가 되자마자 바로 action이 리듀서로 달려가서 새로운 state를 반환해버리기 때문이죠. 
  즉 여기서 "3초를 기다리는 작업" 이 작업을 "미들웨어"가 해주는 것 입니다.

  보통 우리가 리덕스 미들웨어를 사용하는 이유는 "서버와의 통신을 위해서 사용하는 것"이 대부분이고,
  또한 그 중에서도 많이 사용되고 있는 리덕스 미들웨어는 "Redux-thunk" 라는 것이 있습니다.



💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡 - 💡



thunk 함수

thunk의 역할을 '3초를 기다리게 하는 것' 입니다.

툴킷에서는  createAsyncThunk  라는 API를 사용해서 thunk 함수를 생성할 수 있습니다. 
이 API는 함수인데, 첫번째 인자에는 Action Value, 두번째 인자에는 함수가 들어갑니다. 
이 함수에 우리가 하고 싶은 작업들을 구현하면 됩니다.


export const 함수명 = createAsyncThunk(
	"ACTION_VALUE",
	(arg, thunkAPI) => {},
);

arg : createAsyncThunk 의 두번째 인자인 함수 속 첫번째 인자로 thunk함수가 외부에서 실행되었을 때 넣은 값을 여기에서 조회 가능하다.
thunkAPI : thunk가 제공하는 API기능이 담긴 객체



이제 '3초를 기다려보자'

첫번째 자리에는 action value를, 두번째에는 함수를 넣는다.

// src/redux/modules/counterSlice.js

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

export const __addNumber = createAsyncThunk( #addNumber는 thunk다! // __addNumber는 예상기 매니저가 thunk 함수를 구분하기 위한 표시
        # 첫번째 인자 : action value
    "addNumber", 
        # 두번째 인자 : 콜백함수 
    (payload, thunkAPI) => { #arg = payload
        setTimeout(() => {
        thunkAPI.dispatch(addNumber(payload)); #입력값을 dispatch한다. 
        }, 3000); #3초 = 3000ms 뒤에
    }
    );

    const initialState = { # 아래 slice에 넘길 initialState 값임.
    number: 0,
    };

    const counterSlice = createSlice({
    name: "counter",
    initialState, # 위에 선언된 initialState 값
    reducers: {
        addNumber: (state, action) => {
        state.number = state.number + action.payload;
        },

        minusNumber: (state, action) => {
        state.number = state.number - action.payload;
        },
    },
});


export const { addNumber, minusNumber } = counterSlice.actions;
export default counterSlice.reducer;

함수안에는 setTimeout 라는 Web API를 이용해서 3초를 기다리게 했고, 
이후에 thunkAPI 안에 있는 dispatch를 통해서 우리가 원래 하려고 했던 addNumber라는 action creator를 넣었습니다. 

기존에는 addNumber 라는 action creator를 dispatch했다면, 이제는 __addNumber 라는 thunk함수를 dispatch 해줍니다. 





## 정리

- 리덕스 미들웨어를 사용하면, 액션이 리듀서로 전달되기전에 중간에 어떤 작업을 더 할 수있다.
- Thunk를 사용하면, 객체가 아닌 함수를 dispatch 할 수 있게 해준다. [thunk의 핵심]
- 리덕스 툴킷에서 Thunk 함수를 생성할 때는 `createAsyncThunk` 를 이용한다.
- `createAsyncThunk()` 의 첫번째 자리에는 action value, 두번째에는 함수가 들어간다.
- 두번째로 들어가는 함수에서 2개의 인자를 꺼내 사용할 수 있는데,
  첫번째 인자는 컴포넌트에서 보내준 payload이고,
  두번째 인자는 thunk에서 제공하는 여러가지 기능이다.




















































































































































































































































































































































































