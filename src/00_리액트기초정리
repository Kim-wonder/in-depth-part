

Component
리액트는 레고라고 말씀 드렸죠? 컴포넌트는 블록입니다!

1. <header/>
2. <container/>
    1. <imagebanner/>
    2. <contents1/>
3. <footer/>

크게 <header/>, <container/>, <footer/> 세 개의 컴포넌트가 있고,
<container/> 컴포넌트는,
<imagebanner/>, <contents1/> 컴포넌트로 이루어져 있는 거죠!


============================================================================

state
state는 Component가 가지고 있는 데이터입니다.
State는 내 꺼다.
내꺼니깐 마음대로 생성,수정,삭제가 된다.


Props
props는 Component가 부모 Component로부터 받아온 데이터입니다.
Props는 남 꺼다.
남의꺼니깐 마음대로 생성,수정,삭제가 불가능하다.


<container>
	<imagebanner/>
	<contents1/>
</container>

<container/> 컴포넌트는 두 개의 자식 컴포넌트를 가지고 있죠?

- <container/> 컴포넌트만 <imangebanner/> 컴포넌트한테 필요한 이미지 경로를 가지고 있다고 가정합니다. 
  (state로 가지고 있다고 가정합니다!)

- 이 때 <imagebanner/> 컴포넌트는 자신의 부모인 <container/>컴포넌트로부터 **이미지 경로**를 전달받아서 사용해야겠죠?

- <container/>가 가지고 있는 이미지 경로를 <imagebanner/>에게 전달해주면, 
  이 **이미지 경로**가 <imagebanner/> 컴포넌트의 props가 됩니다.

- 다시 말해, 부모 컴포넌트로부터 전달 받은 데이터를 props라고 합니다.

- 그럼 부모 컴포넌트가 가지고 있는 데이터를 <imagebanner/> 컴포넌트가 추가 하거나 수정할 수 있을까요?
    
**Props로 받은 데이터는 수정할 수 없습니다! 남의 것이니까요!**



⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️
함수형 컴포넌트에는 state가 없다. 클래스형에만 있음ㅇㅇ.
(나중에 배울 React hook을 사용하면 함수형 컴포넌트에서도 state를 사용할 수 있지만, hook 없이 state를 사용할 수 없음!)
⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️


< 예 제 - class형 >
//App.js 
import BucketList from "./BucketList";

class App extends React.Component {
  constructor(props) {
    super(props);
    ; // App 컴포넌트의 state를 정의해줍니다.
    this.state = {
      list: ["영화관 가기", "매일 책읽기", "수영 배우기"],
    };
  }
render() {
    return (
      <div className="App">
        <Container>
          <Title >내 버킷리스트</Title>
          <Line/>
        ;   {/* 컴포넌트를 넣어줍니다. */}
        ;   {/* <컴포넌트 명 [props 명]={넘겨줄 것(리스트, 문자열, 숫자, ...)}/> */}
          <BucketList list={this.state.list} />
        </Container>
      </div>
    );
  }
}
//BucketList.js

const BucketList = (props) => {
  const my_lists = props.list;

    return (
        <ListStyle>
        {my_lists.map((list, index) => {
            return (
            <ItemStyle key={index}>
                {list}
            </ItemStyle>
            );
        })}
        </ListStyle>
    );



< 예 제 - 함수형 >
//App.js
import Nemo from "./Nemo";

<div className="App"> {/*컴포넌트 불러다 쓰기*/}
    <Nemo/>






============================================================================

리액트 코딩 룰 1: 
폴더는 소문자로 시작하는 카멜케이스를 사용
JS파일, 컴포넌트 이름은 대문자로 시작하는 카멜케이스를 사용




this 키워드는 깊이 들어가면 context 객체라고 부르는 친구와 연관이 있어요. 
우리는 함수나 클래스 안에서 사용하면 this를 쓴 위치(위의 경우에는 App 클래스)에 있는 값을 가지고 온다고 생각합시다.



============================================================================


리액트는 css를 쓸 때 
<div className="클래스명"> 으로 특정하고
style.css 에서 꾸민다.

.App {
    background-color: #eee;
    height: 100vh;
    width: 100vw;
    display: flex;
}

.container{
    background-color: #fff;
    width: 50vw;
    max-width: 350px;
    margin: auto;
    height: 80vh;
    padding: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.container > h1 {
    color: slateblue;
    text-align: center;
}

그 후 style.css를 import 해주면 된다.
//App.js
import './style.css';

App.js에서는 import를 했는데, 왜 BucketList.js에서는 style.css를 import하지 않나요?
- 자식 컴포넌트는 부모 컴포넌트에 속해 있으니까요!
- 즉, 자식 컴포넌트는 return에 들어 있는 리액트 요소를 부모 컴포넌트에 가져다 줍니다.
- 부모와 같은 스타일 파일을 쓸 때는 부모 컴포넌트에만 import하면 됩니다.


============================================================================


styled-components

import styled from "styled-components"; 로 import 해서 쓴다.

<div className="container">
    <h1>내 버킷리스트</h1>
    <hr className="line"/>
    <BucketList list={this.state.list} />
</div> 

이거를

const Container = styled.div`
  width: 50vw;
  height: 150px;
  background-color: ${(props) => (props.bg_color ? "red" : "purple")};
  p {
    color: blue;
  }
  &:hover{
    background-color: yellow;
  }
`;

이런식으로 주고

<Container>
    <h1>내 버킷리스트</h1>
    <hr className="line"/>
    <BucketList list={this.state.list} />
</Container>


이렇게 쓸 수 있다.

============================================================================


< 리액트 hook > 





** useRef **

const BucketList = ({ list }) => {
  const my_lists = list;
  const my_wrap = React.useRef(null);

  console.log(my_wrap); // 콘솔로 확인해봐요!

  window.setTimeout(() => { // 1초 뒤에는?!
    console.log(my_wrap);
  }, 1000);
  return (
    <div ref={my_wrap}>
      {my_lists.map((list, index) => {
        return <ItemStyle key={index}>{list}</ItemStyle>;
      })}
    </div>
  );
};




























































































































































































































